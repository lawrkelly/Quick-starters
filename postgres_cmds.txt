\i script1.sql

psql -U  -h 10.0.12.21 db_name

/usr/pgsql-9.4/bin/initdb -D /var/lib/pgsql/9.4/data

/usr/pgsql-9.4/bin/pg_ctl -D /export/postgres/pg_data start

pg_ctl -D /export/postgres/data stop

pg_ctl -D /export/postgres/data stop -m fast

/usr/pgsql-9.4/bin/pg_upgrade -b /var/lib/pgsql/9.1/bin -B /usr/pgsql-9.4/bin -d /export/postgres/data -D /export/postgres/pg_data

psql -At -c 'SELECT pg_is_in_recovery()' -p 5432
f

psql -At -c 'SELECT pg_is_in_recovery()' -p 5433
f

SELECT pg_terminate_backend(pid) FROM pg_stat_activity
WHERE now() - xact_start > '3 seconds';

pg_restore -C -d mydb foo.bar

pg_restore -a -d db_name db_name.sql

pg_ctl -D /export/postgres/pg_data stop -m fast

EXPLAIN

pg_ctl -D /export/postgres/pg_data/ reload

SELECT
CASE
WHEN pg_last_xlog_receive_location() = pg_last_xlog_replay_location() THEN 0
 ELSE EXTRACT (EPOCH FROM now() - pg_last_xact_replay_timestamp())::INTEGER
END

select pg_xlog_replay_pause();

select pg_xlog_replay_resume();

pg_stat_statements.max

shared_preload_libraries = 'pg_stat_statements'

# Increase the max size of the query strings Postgres records
track_activity_query_size = 2048

# Track statements generated by stored procedures as well
pg_stat_statements.track = all

/usr/local/pgsql/bin/psql -h 10.0.10.29 -U pgbouncer -c "reload"

SELECT relname as "Relation", relacl as "Access permissions"
FROM pg_class
WHERE  relkind IN ('r', 'v', 'S')
AND relname !~ '^pg_'
ORDER BY relname;

# use streaming replication
standby_mode = 'on'

# fail over when the BRINGUP file exists
trigger_file = '/export/postgres/data/BRINGUP'

ALTER USER username WITH SUPERUSER;
 
ALTER USER username WITH  CREATE ROLE;
 
ALTER USER username WITH CREATEDB;

yum install postgresql94 postgresql94-server postgresql94-libs postgresql94-contrib postgresql94

repmgr -f /etc/repmgr/repmgr.conf \
       --force --rsync-only \
       -h node2 -d repmgr -U repmgr --verbose \
      standby clone

su postgres

createdb pgbench

pgbench -i -s 10 pgbench

repmgr -f /var/lib/pgsql/repmgr/repmgr.conf  cluster show


repmgr -f /var/lib/pgsql/repmgr/repmgr.conf --force -h stg-pulsdb01 -U repmgr --verbose standby clone
If needed follow with this
repmgr -f /var/lib/pgsql/repmgr/repmgr.conf --force -h stg-pulsdb01 -U repmgr --verbose standby clone --force --ignore-rsync-warning

ALTER SYSTEM RESET ALL

alter table table owner to user;

select pg_postmaster_start_time();

DROP INDEX [ CONCURRENTLY ] name

https://www.braintreepayments.com/blog/safe-operations-for-high-volume-postgresql/

pg_upgrade -b oldbindir -B newbindir -d olddatadir -D newdatadir [option...]

pg_upgrade -b /usr/pgsql-9.1/bin/ -B /usr/pgsql-9.4/bin/ -d /export/postgres/data -D /export/postgres/data

promote_command='repmgr standby promote -f /etc/repmgr/repmgr.conf'
follow_command='repmgr standby follow -f /etc/repmgr/repmgr.conf'

repmgr -f /etc/repmgr/repmgr.conf cluster show

repmgr -f /var/lib/pgsql/repmgr/repmgr.conf --verbose master register --force

pgbouncer /etc/pgbouncer.ini

cp /etc/pgbouncer.ini.stg-pulsdb01-solo /etc/pgbouncer.ini

pgbouncer -R

cp /etc/pgbouncer.ini.stg-pulsdb01-master /etc/pgbouncer.ini

pgbouncer -R

 sudo -u postgres /usr/bin/pg_dumpall --no-password -U postgres -c | gzip -7 -n > /tmp/postgresql_full_backup.dump.gz

/usr/pgsql-9.1/bin/postmaster -p 5432 -D /var/lib/pgsql/9.1/data &

SHOW config_file;

SELECT EXTRACT(EPOCH FROM replication_time_lag) FROM repmgr_db_name.repl_status WHERE standby_name = ‘stay’;

repmgr cluster show

/usr/lib/postgresql/9.3/bin/pg_ctl -D /export/postgres/data promote

http://stackoverflow.com/questions/13395787/automatic-failover-with-postgresql-9-1


select * from pg_stat_activity order by backend_start;

COPY table FROM '/tmp/table.csv' DELIMITER ',';

SET enable_seqscan = ON;

ALTER DATABASE <name> WITH CONNECTION LIMIT 100

SHOW max_connections;

SELECT *
FROM   pg_settings
WHERE  name = 'max_connections';

pgbadger -o pg_08_17.html /var/log/postgresql/pg_log/postgresql-2015-08-17_070632.csv


pgbadger -o pg_09_03_054937.html /var/log/postgresql/pg_log/

select * from pg_proc
 where proname LIKE '%RI%'

select * from pg_trigger;

pg_repack -t table_name -d db_name -N 

-x, --only-indexes

-Z, --no-analyze

-d, --dbname

-N, --dry-run

http://www.pgxn.org/dist/pg_repack/1.3.2/doc/pg_repack.html

WITH new_tab as (
     SELECT max( id) AS history_id, col2, col3, col4
FROM  table1
INNER JOIN table2 ON table1.id = table12id
INNER JOIN table3  on table2.id = table3.id
INNER JOIN table4 d on d.col3 = table2.col
inner join table5 g on g.id = d.id
inner join tab6 t6 on t6.id = g.id and t6.user_id = %(userid)s
group by table1.id, table2.id )

 explain 
WITH new_tab as (
     SELECT max( id) AS history_id, col2, col3, col4
FROM  table1
INNER JOIN table2 ON table1.id = table12id
INNER JOIN table3  on table2.id = table3.id
INNER JOIN table4 d on d.col3 = table2.col
inner join table5 g on g.id = d.id
inner join tab6 t6 on t6.id = g.id and t6.user_id = %(userid)s
group by table1.id, table2.id )




 pg_repack -t devices_repack -d db_name 
INFO: repacking table "table1"

pg_repack -t db_name -d tuner

SELECT relname, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze  
FROM pg_stat_all_tables  
WHERE schemaname = 'public'; 

select relname, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze 
from pg_stat_user_tables 
where relname like 'tab_%';

SELECT relname as "Table",
pg_size_pretty(pg_total_relation_size(relid)) As "Size",
pg_size_pretty(pg_total_relation_size(relid) - pg_relation_size(relid)) as "External Size"
FROM pg_catalog.pg_statio_user_tables 
WHERE schemaname = 'public' 
ORDER BY pg_total_relation_size(relid) DESC;

 select a.relname as "Table", pg_size_pretty(pg_total_relation_size(a.relid)) as "Size",  pg_size_pretty(pg_total_relation_size(a.relid) - pg_relation_size(a.relid)) as "External Size",
 b.last_vacuum, b.last_autovacuum, b.last_analyze, b.last_autoanalyze from  pg_catalog.pg_statio_user_tables as a, pg_stat_all_tables as b
 where a.relname = b.relname and b.schemaname = 'public'
order by pg_total_relation_size(b.relid) DESC;
 
 
 

https://lob.com/blog/supercharge-your-postgresql-performance/

https://raw.githubusercontent.com/2ndQuadrant/repmgr/master/QUICKSTART.md

SELECT * from repmgr_test.repl_nodes;

use repmgr standby clone followed by repmgr standby register.

repmgr cluster show

to promote slave  repmgr standby promote

repmgr standby follow


Next, for detailed monitoring, you must run repmgrd (with the same configuration file) on all your nodes. 
Replication status information is stored in a custom schema along with information about registered nodes. 
You also need repmgrd to configure automatic failover in your cluster.

See the FAILOVER.rst file for an explanation of how to set up automatic failover.

/etc/repmgr/repmgr.conf

repmgr -f /etc/repmgr/repmgr.conf --verbose standby promote

repmgr -f /etc/repmgr/repmgr.conf --verbose standby follow

TO BRING BACK former master as a slave ---

repmgr -f /etc/repmgr/repmgr.conf \
  --force --rsync-only \
  -h node2 -d repmgr -U repmgr --verbose \
  standby clone
  
repmgr -f /etc/repmgr/repmgr.conf \
   --force \
   standby register
   


repmgrd is a management and monitoring daemon which runs on standby nodes and which can automate actions such as failover and updating
standbys to follow the new master.repmgrd can be started simply with e.g.:

repmgrd -f /etc/repmgr/repmgr.conf --verbose > $HOME/repmgr/repmgr.log 2>&1
or alternatively:

repmgrd -f /etc/repmgr/repmgr.conf --verbose --monitoring-history > $HOME/repmgr/repmgrd.log 2>&1   


repmgr witness create (see below for details) and can run on a dedicated server or an existing node.
Note that it only makes sense to create a witness server in conjunction with running repmgrd; 
the witness server will require its own repmgrd instance.  
  
repmgr=# SELECT * FROM repmgr_test.repl_status;  

repmgr_db=# SELECT * from repmgr_test.repl_events ;

https://github.com/2ndQuadrant/repmgr

cluster cleanup

http://dba.stackexchange.com/questions/1285/how-do-i-list-all-databases-and-tables-using-psql


select name, unit, min_val, max_val from pg_settings where name in ('max_connections',
  'shared_buffers',
  'effective_cache_size',
  'work_mem',
 'maintenance_work_mem',
  'checkpoint_segments',
  'checkpoint_completion_target',
  'wal_buffers',
  'default_statistics_target');
  
http://www.pgxn.org/dist/pg_repack/1.3.2/doc/pg_repack.html#installation

repmgr -f /var/lib/pgsql/repmgr/repmgr.conf --verbose master register --force

https://groups.google.com/forum/#!topic/repmgr/K0IeiAz44IM

psql -U username db_name

SELECT 
  (total_time / 1000 / 60) as total_minutes, 
  (total_time/calls) as average_time, 
  query 
FROM pg_stat_statements 
ORDER BY 1 DESC 
LIMIT 100;
